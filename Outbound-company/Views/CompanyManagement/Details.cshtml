@model Outbound_company.Models.OutboundCompany

@{
    ViewData["Title"] = "Company Details";
}

<h1>Company Details</h1>

<div>
    <h4>OutboundCompany</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Channel)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Channel)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Extension)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Extension)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Context)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Context)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.CallerId)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.CallerId)
        </dd>
    </dl>
</div>

<div>
    <a class="btn btn-primary" asp-action="Index">Back to List</a>
    <form asp-action="MakeCall" method="post" style="display:inline;">
        <input type="hidden" name="id" value="@Model.Id" />
    </form>
    <button id="start-button" class="btn btn-info" onclick="startCompany(@Model.Id)">Start</button>
    <button id="stop-button" class="btn btn-danger" onclick="stopCompany(@Model.Id)">Stop</button>
    <button class="btn btn-secondary" onclick="confirmDelete(@Model.Id)">Delete statistics</button>
</div>

<!-- Круговой индикатор выполнения -->
<div class="circle-wrap">
    <div class="circle">
        <div class="mask full" id="mask-full">
            <div class="fill" id="fill"></div>
        </div>
        <div class="mask half">
            <div class="fill" id="fill-half"></div>
        </div>
        <div class="circle-inner">
            <div class="percentage" id="percentage">
                @ViewBag.CompletionPercentage.ToString("0")%
            </div>
        </div>
    </div>
</div>

 <script>
    function confirmDelete(id) {
        if (confirm("Are you sure you want to delete all statistics for this company?")) {
            window.location.href = '@Url.Action("DeleteCompanyStatistics", "CompanyManagement", new { id = "__id__" })'.replace('__id__', id);
        }
    }
</script>

<script>
    function startCompany(id) {
        window.location.href = '@Url.Action("Start", "CompanyManagement", new { id = "__id__" })'.replace('__id__', id);
        alert("Company was started")
    }
</script>

<script>
    function stopCompany(id) {
        window.location.href = '@Url.Action("Stop", "CompanyManagement", new { id = "__id__" })'.replace('__id__', id);
        alert("Company was stoped")
    }
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Функция для обновления статистики
        function updateStatistics() {
            $.ajax({
                url: '@Url.Action("GetUpdatedStatistics", "CompanyManagement", new { id = Model.Id })',
                type: 'GET',
                success: function (data) {
                    // Обновляем процент выполнения
                    var percentage = parseFloat(data.completionPercentage);
                    document.getElementById('percentage').textContent = percentage.toFixed(2) + "%";
                    var fill = document.getElementById('fill');
                    var fillHalf = document.getElementById('fill-half');
                    var maskFull = document.getElementById('mask-full');

                    console.log('Response persent:', data.completionPercentage);

                    if (percentage > 50) {
                        fillHalf.style.transform = 'rotate(180deg)';
                        fill.style.transform = `rotate(${(percentage - 50) * 3.6}deg)`;
                        maskFull.style.clip = 'rect(auto, auto, auto, auto)';
                    } else {
                        fill.style.transform = `rotate(${percentage * 3.6}deg)`;
                        maskFull.style.clip = 'rect(0px, 60px, 120px, 0px)';
                    }

                    if (percentage >= 100) {
                        document.getElementById('start-button').disabled = true;
                        document.getElementById('stop-button').disabled = true;
                    } else {
                        document.getElementById('start-button').disabled = false;
                        document.getElementById('stop-button').disabled = false;
                    }
                },
                error: function () {
                    console.error("Error fetching updated statistics.");
                }
            });
        }

        // Обновление статистики каждые 5 секунд
        setInterval(updateStatistics, 1000);

        // Первоначальная проверка статуса при загрузке страницы
        updateStatistics();
    });
</script>
